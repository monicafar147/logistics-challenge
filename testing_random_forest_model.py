# -*- coding: utf-8 -*-
"""testing random forest model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/monicafar147/regression-predict-api-template/blob/Monica/testing_random_forest_model.ipynb
"""

# Helper Dependencies
import numpy as np
import pandas as pd
pd.options.mode.chained_assignment = None 
import pickle
import json
import math

# Machine learning models
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import Lasso
from sklearn.model_selection import train_test_split

#processed_data = pd.read_csv('processed_data.csv')

def _preprocess(feature_vector_df):
    # ----------- Replace this code with your own preprocessing steps --------
    feature_vector_df.columns = [col.replace("-"," ") for col in feature_vector_df.columns]
    feature_vector_df.columns = [col.replace("(Mo = 1)"," ") for col in feature_vector_df.columns]
    feature_vector_df.columns = [col.replace(" ","") for col in feature_vector_df.columns]

    # Convert time columns to datetime 
    feature_vector_df['PickupTime'] = pd.to_datetime(feature_vector_df['PickupTime']).dt.time
    feature_vector_df['PlacementTime'] = pd.to_datetime(feature_vector_df['PlacementTime']).dt.time
    feature_vector_df['ConfirmationTime'] = pd.to_datetime(feature_vector_df['ConfirmationTime']).dt.time
    feature_vector_df['ArrivalatPickupTime'] = pd.to_datetime(feature_vector_df['ArrivalatPickupTime']).dt.time
    #feature_vector_df['ArrivalatDestinationTime'] = pd.to_datetime(feature_vector_df['ArrivalatDestinationTime']).dt.time

    #feature_vector_df = feature_vector_df[feature_vector_df['TimefromPickuptoArrival'] > 60]

    # Converting relevant columns into categorical data types
    feature_vector_df['VehicleType'] = feature_vector_df['VehicleType'].astype('category')
    feature_vector_df['PlatformType'] = feature_vector_df['PlatformType'].astype('category')
    feature_vector_df['PersonalorBusiness'] = feature_vector_df['PersonalorBusiness'].astype('category')

    feature_vector_df['PlacementDayofMonth'] = feature_vector_df['PlacementDayofMonth'].astype('category')
    feature_vector_df['PlacementWeekday'] = feature_vector_df['PlacementWeekday'].astype('category')
    feature_vector_df['ConfirmationDayofMonth'] = feature_vector_df['ConfirmationDayofMonth'].astype('category')
    feature_vector_df['ConfirmationWeekday'] = feature_vector_df['ConfirmationWeekday'].astype('category')

    feature_vector_df['ArrivalatPickupDayofMonth'] = feature_vector_df['ArrivalatPickupDayofMonth'].astype('category')
    feature_vector_df['ArrivalatPickupWeekday'] = feature_vector_df['ArrivalatPickupWeekday'].astype('category')
    #feature_vector_df['ArrivalatDestinationDayofMonth'] = feature_vector_df['ArrivalatDestinationDayofMonth'].astype('category')
    #feature_vector_df['ArrivalatDestinationWeekday'] = feature_vector_df['ArrivalatDestinationWeekday'].astype('category')

    #selecting training features
    training_features = feature_vector_df.iloc[:, :-1]
    training_features[['PickupDayofMonth', 'PickupWeekday']] = training_features[['PickupDayofMonth', 'PickupWeekday']].astype('category')
    training_features[['PlatformType', 'PersonalorBusiness']] = training_features[['PlatformType', 'PersonalorBusiness']].astype('category')
    
    # Selecting columns to match training data
    training_features = training_features[['PlatformType', 'PersonalorBusiness',
                                       'PickupDayofMonth', 'PickupWeekday',
                                       'PickupTime', 'PickupLat',	'PickupLong',
                                       'DestinationLat',	'DestinationLong',
                                       'Distance(KM)', 'Temperature',
                                       'Precipitationinmillimeters']]

    # Function to assign time values into time buckets
    def assign_time_category(delivery_time):
        dts = pd.DataFrame(['00:00:00', '6:00:00', '9:00:00', '12:00:00', '15:00:00', '18:00:00'])
        dts[0] = pd.to_datetime(dts[0]).dt.time
        if delivery_time >= dts[0][0] and delivery_time < dts[0][1]:
            return 'Early Morning'
        elif delivery_time >= dts[0][1] and delivery_time < dts[0][2]:
            return 'Morning'
        elif delivery_time >= dts[0][2]  and delivery_time < dts[0][3]:
            return 'Late Morning'
        elif delivery_time >= dts[0][3] and delivery_time < dts[0][4]:
            return 'Afternoon'
        elif delivery_time >= dts[0][4] and delivery_time < dts[0][5]:
            return 'Late Afternoon'
        else:
            return 'Evening'

    # Create new time bucket feature based on assign_time_category function
    training_features['DeliveryTimes'] = training_features['PickupTime'].apply(assign_time_category)
    training_features['DeliveryTimes'] = training_features['DeliveryTimes'].astype('category')

    # Dropping 'Pickup - Time' because we have created 'Delivery Times' in its place
    training_features.drop('PickupTime', axis=1, inplace=True)

    # Fill missing precipitation values with 0
    training_features['Precipitationinmillimeters'] = training_features['Precipitationinmillimeters'].fillna(value=0)
   
    # Impute missing temperature based on delivery time
    # Function to fill nulls with a column's mean value
    def mean(col):
      return col.fillna(col.mean())

    # Impute missing temperature based on delivery time
    training_features['Temperature'] = training_features.groupby(['DeliveryTimes'])['Temperature'].transform(mean)

    # Function to calculate a coordinate's distance from the CBD coordinate
    def distance_CBD(lat, long):
      return math.sqrt(((lat - -1.283526) ** 2) + ((long - 36.823269) ** 2))

    training_features['DistanceCBDpickup'] = np.vectorize(distance_CBD)(training_features['PickupLat'],training_features['PickupLong'])
    training_features['DistanceCBDdest'] = np.vectorize(distance_CBD)(training_features['DestinationLat'],training_features['DestinationLong'])
    
    # One-hot encoding for categorical data
    training_features = pd.get_dummies(training_features,
                                   columns=['PlatformType', 'PersonalorBusiness', 'PickupDayofMonth', 'PickupWeekday', 'DeliveryTimes'],
                                   prefix=['platformtype', 'personalbusiness', 'dayofmonth', 'weekday', 'pickuptimes'])

    # ------------------------------------------------------------------------
    
    predict_vector = training_features

    return predict_vector

if __name__ == '__main__':

    # load in data
    print('loading in data')
    data = pd.read_csv('https://raw.githubusercontent.com/monicafar147/regression-predict-api-template/master/Test.csv', index_col=0)
    print(data.head())
    processed_data = _preprocess(data)
    print('data preprocessed: True')
    print(processed_data.head())
    print('loading pickle file')
    model_load_path = "assets/trained-models/random_forest_model_2.pkl"
    
    with open(model_load_path,'rb') as file:
        unpickled_model = pickle.load(file)

    print('model loaded: True')
    y_pred = unpickled_model.predict(processed_data)
    print(y_pred)